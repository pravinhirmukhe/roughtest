<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of Site
 *
 * @author Pravinkumar
 */
class Site {

//put your code here
    var $data = null;
    var $ci = null;

    public function __get($var) {
        return get_instance()->$var;
    }

    public function __construct() {
        $this->ci = &get_instance();
    }

    public function encryptPass($pass) {
        $salt = $this->config->item('salt');
        return md5($pass . $salt);
    }

    function str_encrypt_n_decrypt($string, $function_type) {
        $return_str = null; //setting up variable with `null` value.
        if ($function_type == 'enc') {
            $return_str = base64_encode($string);
        }
        if ($function_type == 'dec') {
            $return_str = base64_decode($string);
        }
        return $return_str;
    }

    function getTopicName($tid) {
        return $this->ci->db->select('topic_name')->get_where(TOPICS, array('topic_id' => $tid))->row()->topic_name;
    }

    function getSubName($sub_id) {
        return $this->ci->db->select('sub_name')->get_where(SUBJECTS, array('sub_id' => $sub_id))->row()->sub_name;
    }

    function getSubId($tid) {
        return $this->ci->db->select('sub_id')->get_where(TOPICS, array('topic_id' => $tid))->row()->sub_id;
    }

    function get_pic_name() {
        return $this->ci->session->userdata('UID_Pro_Pic');
    }

    function getKc($topic) {
        return $this->ci->db->select('kc_text')->get_where(KEY_CONCEPTS, array('topic_id' => $topic))->row()->kc_text;
    }

    function updateDppFlag($c, $i, $u) {
//update dpp flag
//c: correct, i: incorrect, u: unattempted, a: accuracy
//calculating accuracy
        $acc_tot = $c + $i;
        $acc_perc = $c * 100 / $acc_tot;
//accuracy calculated
        $uid = $this->ci->session->userdata('UID');
        $topicid = $this->ci->session->userdata('topic_id');
        $subid = $this->ci->getSubId($topicid);
        $ex_q = $this->ci->db->get_where(DPP_LOG, array('UID' => $uid, 'sub_id' => $subid));
//        $ex_q = mysql_query("SELECT * FROM " . DPP_LOG . " WHERE UID='$uid' and sub_id='$subid'") or die(mysql_error());
//        $ex_d_count = mysql_num_rows($ex_q);
        if (!isset($acc_perc) || $acc_perc == null || $acc_perc == "" || $acc_perc == false) {
            $acc_perc = 0;
        }
        if ($ex_q->num_rows() == 0) {
            $dpp_arr = array();
            $dpp_arr[0] = array($c, $i, $u, $acc_perc);
            $dpp_time_arr[0] = strtotime(date("H:i:s"));
            $enc_dpp_arr = json_encode($dpp_arr);
            $enc_dpp_time_arr = json_encode($dpp_time_arr);
            $this->ci->db->insert(DPP_LOG, array('UID' => $uid, 'sub_id' => $subid, 'data' => $enc_dpp_arr, 'dpp_time' => $enc_dpp_time_arr));
//            mysql_query("INSERT INTO " . DPP_LOG . "(UID,sub_id,data,dpp_time) VALUES('$uid','$subid','$enc_dpp_arr','$enc_dpp_time_arr')") or error_log(mysql_error());
        } else {
            $ex_d = (array) $ex_q->row();
            $dpp_arr = json_decode($ex_d['data']);
            $dpp_arr_count = count($dpp_arr);
            $dpp_time_arr = json_decode($ex_d['dpp_time']);
            $data_arr_formation = array($c, $i, $u, $acc_perc);
            //$enc_data_arr_formation=json_encode($data_arr_formation);
            $dpp_arr[$dpp_arr_count] = $data_arr_formation;
            $dpp_time_arr[$dpp_arr_count] = strtotime(date("H:i:s"));
            $enc_dpp_arr = json_encode($dpp_arr);
            $enc_dpp_time_arr = json_encode($dpp_time_arr);
            $this->ci->db->update(DPP_LOG, array('data' => $enc_dpp_arr, 'dpp_time' => $enc_dpp_time_arr), array('UID' => $uid, 'sub_id' => $subid));
//            mysql_query("Update " . DPP_LOG . " set data='$enc_dpp_arr', dpp_time='$enc_dpp_time_arr' where UID='$uid' and sub_id='$subid'") or die(mysql_error());
        }
    }

    function updateExFlag() {
        //update exercise flag
        $uid = $this->ci->session->userdata('UID');
        $ex_type = $this->ci->session->userdata('ex_type');
        $topicid = $this->ci->session->userdata('topic_id');
        $ex_d = (array) $this->ci->db->get_where(READ_LOG, array('UID' => $uid))->row();
//        $ex_q = mysql_query("SELECT * FROM " . READ_LOG . " WHERE UID='$uid'") or die(mysql_error());
//        $ex_d = mysql_fetch_assoc($ex_q);
        $ex_str = "e$ex_type";
        $ex_arr = json_decode($ex_d[$ex_str]);
        if (is_array($ex_arr)) {
            $ex_count = count($ex_arr);
            if (!in_array($topicid, $ex_arr)) {
                $ex_arr[$ex_count] = $topicid;
            }
        } else {
            $ex_arr[0] = $topicid;
        }
        $enc_ex_arr = json_encode($ex_arr);
        if ($this->ci->db->update(READ_LOG, array("e$ex_type" => $enc_ex_arr), array('UID' => $uid))) {
            
        } else {
            echo "Couldnt update exercise";
        }
    }

    function getFriendsAndRequests() {
        $uid = $this->ci->session->userdata('UID');
        $friends_data = (array) $this->ci->db->get_where(FRIENDS_TABLE, array('UID' => $uid))->row();
        return $friends_data;
    }

    function getUserInfo($uid) {
        $f_d_fetch = (array) $this->ci->db->get_where(USER_INFO, array('UID' => $uid))->row();
//        $f_d_query = mysql_query("select * from " . USER_INFO . " where UID='$uid'") or die(mysql_error());
//        $f_d_fetch = mysql_fetch_assoc($f_d_query);
        return $f_d_fetch;
    }

}
